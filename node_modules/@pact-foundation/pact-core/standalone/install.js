"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBinaryEntry = exports.createConfig = exports.PACT_STANDALONE_VERSION = void 0;
const chalk = require("chalk");
exports.PACT_STANDALONE_VERSION = '1.91.0';
function makeError(msg) {
    return new Error(chalk.red(`Error while locating pact binary: ${msg}`));
}
function createConfig() {
    const CHECKSUM_SUFFIX = '.checksum';
    return {
        binaries: [
            {
                platform: 'win32',
                binary: `pact-${exports.PACT_STANDALONE_VERSION}-win32.zip`,
                binaryChecksum: `pact-${exports.PACT_STANDALONE_VERSION}-win32.zip${CHECKSUM_SUFFIX}`,
                folderName: `win32-${exports.PACT_STANDALONE_VERSION}`,
            },
            {
                platform: 'darwin',
                binary: `pact-${exports.PACT_STANDALONE_VERSION}-osx.tar.gz`,
                binaryChecksum: `pact-${exports.PACT_STANDALONE_VERSION}-osx.tar.gz${CHECKSUM_SUFFIX}`,
                folderName: `darwin-${exports.PACT_STANDALONE_VERSION}`,
            },
            {
                platform: 'linux',
                arch: 'x64',
                binary: `pact-${exports.PACT_STANDALONE_VERSION}-linux-x86_64.tar.gz`,
                binaryChecksum: `pact-${exports.PACT_STANDALONE_VERSION}-linux-x86_64.tar.gz${CHECKSUM_SUFFIX}`,
                folderName: `linux-x64-${exports.PACT_STANDALONE_VERSION}`,
            },
        ],
    };
}
exports.createConfig = createConfig;
const CONFIG = createConfig();
function getBinaryEntry(platform = process.platform, arch = process.arch) {
    const found = CONFIG.binaries.find((value) => value.platform === platform && (value.arch ? value.arch === arch : true));
    if (found === undefined) {
        throw makeError(`Cannot find binary for platform '${platform}' with architecture '${arch}'.`);
    }
    return found;
}
exports.getBinaryEntry = getBinaryEntry;
//# sourceMappingURL=install.js.map